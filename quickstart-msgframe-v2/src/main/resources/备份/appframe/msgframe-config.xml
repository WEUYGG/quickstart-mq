<?xml version="1.0" encoding="UTF-8"?>
<msgframeCfg xmlns="http://www.youngzil.com/msgframe">
	<centerCfg>
		<!--［1-1］ 中心名称 -->
		<name>comframe</name>
		<!-- 全局配置 -->
		<globalCfg>
	<!-- 消息生产端消息注入处理类，可以不配或者多配，在发送时可以在消息发送前执行，配置类的全路径且继承接口 com.cmos.msgframe.common.IProsInjectionProcessor -->
<!-- 		<prodInjection>com.ai.aif.msgframe.extend.es.hook.impl.SendMessageHookESImpl</prodInjection> -->
		<!-- 消息消费端消息注入处理类，可以不配或者多配，在消费时可以在消息处理业务前执行，配置类的全路径且继承接口 com.cmos.msgframe.common.IConsInjectionProcessor -->
<!-- 		<consInjection>com.ai.aif.msgframe.extend.es.hook.impl.ConsumeMessageHookESImpl</consInjection> -->
		</globalCfg>

		<destinations>
			<queue name="test1"  belong="order"  number="3"/>
			<queue name="test2"  belong="order"  number="3"/>
			<queue name="test3"  belong="order"  number="3"/>
			<queue name="test4"  belong="order"  number="3"/>
			<queue name="test5"  belong="order"  number="3"/>
		</destinations>
		<subscribes>
			<!-- tag:可选，默认是＊。配合destinations->ruleClass，如果有多个过滤条件，请按照a||b -->
			<!--isTrans是否开启事务消费，不配此属性或者isTrans="false"为未开启，true为开启-->
			<subscribe subDestination="test1">
				<!-- 配置实现类，利用管道流的思想，按照配置顺序依次处理消息.只支持异步消息 -->
				<implclass>com.ai.aif.msgframe.SubscribeImpl1</implclass>
				<!--<implclass>com.ai.aif.msgframe.SubscribeImpl2</implclass> -->
			</subscribe>
		</subscribes>
		<centers>
			<center name="order" containClusters="msgframe_cluster" />
		</centers>
		<clusters>
		<!--RocketMQ、Kafka、ActiveMQ、RabbitMQ  -->
<!-- 			<cluster name="msgframe_cluster" type="RocketMQ"> -->
			<cluster name="msgframe_cluster" type="ActiveMQ">
<!--   				<url>10.1.243.23:59092,10.1.243.23:59093,10.1.243.23:59094</url> -->
  				<url>failover:(tcp://10.11.20.102:61616)</url>
<!--   				<url>10.11.20.102:9876</url> -->
			</cluster>
		</clusters>

		<persistence>
			<exceptionPersistence>
				<!-- 生产者异常处理,必须实现com.ai.aif.msgframe.common.ex.exception.IExceptionPersitence接口 -->
				<producerExceptionClass>com.ai.aif.msgframe.producer.ex.ProducerExceptionHandle</producerExceptionClass>
				<!-- 消费者异常处理,必须实现com.ai.aif.msgframe.common.ex.exception.IExceptionPersitence接口 -->
				<consumerExceptionClass>com.ai.aif.msgframe.consumer.ex.ConsumerExceptionHandle</consumerExceptionClass>
			</exceptionPersistence>
		</persistence>
	</centerCfg>
</msgframeCfg>