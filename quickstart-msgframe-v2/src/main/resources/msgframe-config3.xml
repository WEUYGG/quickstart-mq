<?xml version="1.0" encoding="utf-8"?>
<msgframeCfg xmlns="http://www.asiainfo.com/msgframe">
	<!-- 客户端所属中心：个人业务中心 -->
	<name>personalCenter</name>
	<!--全局配置 -->
	<globalCfg>
		<!--消息生产端消息注入处理类，可以不配或者多配，在发送时可以在消息发送前执行，配置类的全路径且继承接口 com.ai.aif.msgframe.common.hook.ISendMessageHook -->
		<prodInjection>com.ai.aif.msgframe.extend.appframe.hook.RecordSendMessageHook</prodInjection>
<!-- 		<prodInjection>com.ai.aif.msgframe.extend.es.hook.impl.SendMessageHookESImpl</prodInjection> -->
		<!--消息消费端消息注入处理类，可以不配或者多配，在消费时可以在消息处理业务前执行，配置类的全路径且继承接口 com.ai.aif.msgframe.common.hook.IConsumeMessageHook -->
<!-- 		<consInjection>com.ai.aif.msgframe.extend.es.hook.impl.ConsumeMessageHookESImpl</consInjection> -->
		<consInjection>com.ai.aif.msgframe.extend.appframe.hook.RecordConsumeMessageHook</consInjection>
<!-- 		<consInjection>com.ai.aif.msgframe.extend.appframe.hook.AntiDuplicateConsumerHook</consInjection> -->
<!-- 		<warmUpper>com.asiainfo.crm.common.msg.producer.WarmMsg</warmUpper> -->
	</globalCfg>
	<!--后面都是从控制台拉取得数据,需要发送的topic或者queue -->
	<destinations timeout="2000" resendtimes="3" resenddelay="1000">
		<queue fromCenter="personalCenter" order="false" name="queuehaha" belong="sssssss" type="event" number="1" ruleClass="com.ai.aif.msgframe.common.route.impl.CustomDestinationRule" />
		<topic fromCenter="personalCenter" order="false" name="testtopic" belong="sssssss" type="event" number="20" />
	
	</destinations>
	<!--subscribeCenter 订阅的中心，统一化配置 -->
	<subscribes>
			<subscribe consumeType="pull" subscribeCenter="amsCenter" subDestination="queuehaha" tag="nihao0" transaction="true" implclass="org.quickstart.msgframe.v2.consumer.ConsumerProcessorImpl" />
			<subscribe consumeType="pull" subscribeCenter="amsCenter" subDestination="queuehaha" tag="nihao1" transaction="true" implclass="org.quickstart.msgframe.v2.consumer.ConsumerProcessorImpl" />
			<subscribe consumeType="pull" subscribeCenter="amsCenter" subDestination="testtopic" tag="*" transaction="true" implclass="org.quickstart.msgframe.v2.consumer.ConsumerProcessorImpl" />
	</subscribes>
	<!-- half消息客户端回查接口,可选(不发half消息时，不要选),实现TransactionCheckListener 接口的checkLocalTransactionState方法 -->
	<!-- <transactionCheckListener>com.asiainfo.aif.msgframe.halfmsgtransaction.TransactionCheckListenerImpl</transactionCheckListener> -->
	<!-- containClusters: 定义了中心部署在哪些集群上 -->
	<centers>
		<center name="sssssss" containClusters="cluster-1" />
	</centers>
	<clusters>
		<cluster name="cluster-1" poolSize="2" type="ActiveMQ">
<!-- 			<url>failover:(tcp://20.26.38.162:61616)</url> -->
			<url>failover:(tcp://20.26.38.163:61616)</url>
<!-- 			<url>failover:(tcp://20.26.38.163:61616)</url> -->
		</cluster>
	</clusters>
	<persistence>
		<exceptionPersistence>
			<!-- 持久化类型：db（数据库）,class(实现类) -->
			<!-- 生产者异常处理,必须实现com.ai.aif.msgframe.common.ex.exception.IExceptionPersitence接口 -->
			<producerExceptionClass>com.ai.aif.msgframe.producer.ex.AppframeProducerExceptionHandle</producerExceptionClass>
			<!-- 消费者异常处理,必须实现com.ai.aif.msgframe.common.ex.exception.IExceptionPersitence接口 -->
			<consumerExceptionClass>com.ai.aif.msgframe.consumer.ex.ConsumerExceptionHandle</consumerExceptionClass>
		</exceptionPersistence>
		<!-- logPersistence 消息是否进行客户端持久化-false、true -->
	</persistence>
</msgframeCfg>
